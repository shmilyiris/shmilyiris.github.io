<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Javascript学习笔记</title>
    <url>/2020/06/30/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>　　昨天刚刚搭建了自己的博客，这也算是自己写的第一个blog吧（正好也是第一次markdown，顺便感受一下哈哈）。</p>
<p>　　最近刚刚学习到前端的相关知识，在<a href="https://github.com/freeCodeCamp/freeCodeCamp" target="_blank" rel="noopener">FreeCodeCamp</a>上练习<a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/" target="_blank" rel="noopener">Basic Javascript</a>和<a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/" target="_blank" rel="noopener">Es 6</a>的基础知识，知识体系有点混乱，这篇笔记也是帮助自己理清一下思路。那么就让我开始吧~（麦子式破音）</p>
<a id="more"></a>

<h2 id="Basic-javascript"><a href="#Basic-javascript" class="headerlink" title="Basic javascript"></a>Basic javascript</h2><p><em>注：不按系统知识记，只记录自己不熟的知识点</em></p>
<h3 id="1、字符串不变性"><a href="#1、字符串不变性" class="headerlink" title="1、字符串不变性"></a>1、字符串不变性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> usedString = <span class="string">"Bob"</span>;</span><br><span class="line">usedString[<span class="number">0</span>] = <span class="string">'J'</span>;</span><br></pre></td></tr></table></figure>
<p>以上这段代码并不能修改<code>usedString</code> 为<code>&quot;Job&quot;</code>的输出，这就是字符串的不变性。要想实现替换的话，只能将字符串重新赋值。</p>
<h3 id="2、push-pop-shift-unshift方法"><a href="#2、push-pop-shift-unshift方法" class="headerlink" title="2、push, pop, shift, unshift方法"></a>2、push, pop, shift, unshift方法</h3><ul>
<li>push()将括号中的数据追加到数组的末尾</li>
<li>pop()用来抛出数组的末尾数据，同时还可以将该数据赋给一个变量</li>
<li>shift()抛出第一个数据，其他和pop()一样</li>
<li>unshift()将该数据移到数组的开头</li>
</ul>
<p><strong>用这些方法能够很容易的实现经典的数据结构–堆栈</strong></p>
<h3 id="3、对象（python的字典）"><a href="#3、对象（python的字典）" class="headerlink" title="3、对象（python的字典）"></a>3、对象（python的字典）</h3><h4 id="3-1-访问方式"><a href="#3-1-访问方式" class="headerlink" title="3.1 访问方式"></a>3.1 访问方式</h4><h5 id="中括号访问"><a href="#中括号访问" class="headerlink" title="中括号访问"></a>中括号访问</h5><p>中括号访问可以进行多层寻找，而且中间的属性名称可以是来自于某个变量的值，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> johnsonOneOfTheSportHobby;</span><br><span class="line"><span class="keyword">var</span> myInfo=&#123;</span><br><span class="line">    name: <span class="string">"Johnson"</span>,</span><br><span class="line">    sex: <span class="string">"male"</span>,</span><br><span class="line">    hobby_sport: &#123;<span class="string">"basketball"</span>, <span class="string">"swimming"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">johnsonOneOfTheSportHobby = myInfo[hobby_sport][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h5 id="点操作符访问"><a href="#点操作符访问" class="headerlink" title="点操作符访问"></a>点操作符访问</h5><p>点操作符的使用场景比较局限。只有属性名称已知的话，才可以使用点操作符，<strong>变量名+点操作符访问变量的操作不合法</strong>，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> johnsonOneOfTheSportHobby;</span><br><span class="line"><span class="keyword">var</span> property = sex;</span><br><span class="line"><span class="keyword">var</span> myInfo=&#123;</span><br><span class="line">    name: <span class="string">"Johnson"</span>,</span><br><span class="line">    sex: <span class="string">"male"</span>,</span><br><span class="line">    hobby_sport: &#123;<span class="string">"basketball"</span>, <span class="string">"swimming"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">johnsonSex = myInfo.property; <span class="comment">// 不正确</span></span><br><span class="line">johnsonSex = myInfo.sex; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="3-2-更新方式"><a href="#3-2-更新方式" class="headerlink" title="3.2 更新方式"></a>3.2 更新方式</h4><p><em>以下中括号方式修改也可</em></p>
<h5 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> myInfo.sex; <span class="comment">// 删除myInfo的sex属性</span></span><br></pre></td></tr></table></figure>
<h5 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myInfo.sex = <span class="string">"female"</span>; <span class="comment">// 更改Info中的属性</span></span><br></pre></td></tr></table></figure>
<h5 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myInfo.job = <span class="string">"coder"</span>;  <span class="comment">// 添加job属性，并将数据初始化为coder</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="3-3-判断方式"><a href="#3-3-判断方式" class="headerlink" title="3.3 判断方式"></a>3.3 判断方式</h4><h5 id="判断属性是否存在"><a href="#判断属性是否存在" class="headerlink" title="判断属性是否存在"></a>判断属性是否存在</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(myInfo.hasOwnProperty(job) == <span class="literal">false</span>)&#123;</span><br><span class="line">    myInfo.job = <span class="string">"coder"</span>;  </span><br><span class="line">    <span class="comment">// 如果没有job属性，则添加该属性并初始化为coder</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="3-4-JavaScript-Object-Notation-JSON"><a href="#3-4-JavaScript-Object-Notation-JSON" class="headerlink" title="3.4 JavaScript Object Notation(JSON)"></a>3.4 JavaScript Object Notation(JSON)</h4><p><strong>JSON使用Javascript对象的格式来存储数据</strong>，JSON是灵活的，因为它允许多种数据结构的任意组合，下面来看一个JSON的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyFriend=[</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">"Iris"</span>,</span><br><span class="line">        sex: <span class="string">"female"</span>,</span><br><span class="line">        hobby_sport: [<span class="string">"basketball"</span>, <span class="string">"movie"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">"Kevin Durant"</span>,</span><br><span class="line">        sex: <span class="string">"male"</span>,</span><br><span class="line">        hobby_sport: [<span class="string">"basketball"</span>, <span class="string">"chatting"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>JSON可以按一种类似串联的方式，来访问格式中的某个数据，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">girlfriendHobby = MyFriend[<span class="number">0</span>].hobby_sport[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="ES-6"><a href="#ES-6" class="headerlink" title="ES 6"></a>ES 6</h2><h3 id="1、let关键字"><a href="#1、let关键字" class="headerlink" title="1、let关键字"></a>1、let关键字</h3><ul>
<li><strong>let关键字只在let命令所在的代码块里有效</strong><br>为了帮助理解这个<code>代码块</code>的概念，下面介绍一个实例：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'function scope'</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">'block scope'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Block scope i is: '</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Function scope i is: '</span>, i);</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这段代码最后会返回结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Block scope i is block scope</span><br><span class="line">Function scope is fuction scope</span><br></pre></td></tr></table></figure>
也就是i的赋值只在对应声明的function大模块和if模块里才会生效，let关键字可以连续声明两次变量而不报错，原因也是<strong>这两次let在不同的模块里</strong>。</li>
</ul>
<h3 id="2、const关键字"><a href="#2、const关键字" class="headerlink" title="2、const关键字"></a>2、const关键字</h3><p>const关键字之前以为能够完全锁定一个变量，实则不然</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">// 不合法</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="number">8</span>;  <span class="comment">// 合法，s被改为[5, 6, 8]</span></span><br></pre></td></tr></table></figure>
<p>也就是类似于这种对象，const只能保证无法直接更改原对象，但是像这种逐一修改的方式仍能改变原对象。<br>那么有没有更保险的方法，能够“锁住”对象呢？Javascript提供了一种方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.freeze(obj);  </span><br><span class="line"><span class="comment">// Object.freeze()函数能够使得针对obj的修改全部被忽视</span></span><br></pre></td></tr></table></figure>

<h3 id="3、箭头函数"><a href="#3、箭头函数" class="headerlink" title="3、箭头函数"></a>3、箭头函数</h3><p>在JavaScript中，通常不需要为函数命名，特别是在将一个函数作为参数传递给另一个函数时。取而代之的是，我们创建内联函数。从而不需要命名这些函数，因为我们不会在其他地方重用它们。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myFun = &#123;</span><br><span class="line">    <span class="keyword">var</span> myVar = <span class="string">"default name"</span>;</span><br><span class="line">    <span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上这段简单的函数可以被替换成下面的类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> myVar = <span class="string">"default name"</span>;</span><br><span class="line">    <span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而当函数只有返回值语句是，以上写法仍能够被简化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myFun = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"default name"</span>;</span><br></pre></td></tr></table></figure>
<p>这三段代码都是等效的，显然第三种是最高效的写法。</p>
<p>若这个内联函数有参数，则应该被写成如下的样子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myFun = <span class="function">(<span class="params">name = <span class="string">"default"</span></span>) =&gt;</span> name + <span class="string">"name"</span>;</span><br></pre></td></tr></table></figure>
<p>和其他语言一样，若传递了一个有意义的实参，参数值以传递值为准。</p>
<h3 id="4、rest参数"><a href="#4、rest参数" class="headerlink" title="4、rest参数"></a>4、rest参数</h3><p>为了帮助我们创建更灵活的函数，ES6为函数参数引入了rest参数。使用rest参数，您可以创建具有可变数量参数的函数。这些参数存储在一个<strong>数组</strong>中，<strong>以后可以从函数内部访问该数组</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">howMany</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"You have passed "</span> + args.length + <span class="string">" arguments."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(howMany(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)); </span><br><span class="line"><span class="comment">// You have passed 3 arguments.</span></span><br><span class="line"><span class="built_in">console</span>.log(howMany(<span class="string">"string"</span>, <span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123; &#125;)); </span><br><span class="line"><span class="comment">// You have passed 4 arguments.</span></span><br></pre></td></tr></table></figure>
<p>从这个FCC的实例中，可以看出来…args的length是与传入参数的数量有关的，而传入的参数共同构成了一个数组，数组名为<code>args</code>。</p>
<h3 id="5、spread操作符"><a href="#5、spread操作符" class="headerlink" title="5、spread操作符"></a>5、spread操作符</h3><p>ES6引入了spread操作符，它允许我们在需要多个参数或元素的地方展开数组和其他表达式，这增强了代码的可读性和高效性。<code>···arr</code>返回一个未打包的数组。换句话说，它分散了数组。但是，spread操作符只能就地工作，比如在函数的参数或数组文字中。下面来看两个实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">6</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">45</span>];</span><br><span class="line"><span class="keyword">const</span> maximus = <span class="built_in">Math</span>.max(...arr); <span class="comment">// returns 89</span></span><br><span class="line"><span class="keyword">const</span> spreaded = ...arr; <span class="comment">// 不合法</span></span><br></pre></td></tr></table></figure>

<h3 id="6、析构赋值-destructing-assignment"><a href="#6、析构赋值-destructing-assignment" class="headerlink" title="6、析构赋值(destructing assignment)"></a>6、析构赋值(destructing assignment)</h3><p>析构赋值这部分涉及到的知识点比较多，我直接上实例：</p>
]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
</search>
